Report Player System

Report Player e' un servizio web che permette alle persone di segnalare(reportare) i giocatori di league of legends per varie cause(feeding , abuso verbale ecc..).
I report possono essere fatti da utenti registrati al sistema, l utente  puo' reportare il/i player per varie cause, puo editare e cancellare i report che fa fatto.Ogni report puo’ essere commentato da chiunque e’ registrato al sistema.
Il sito web e' divisono in una  HomePage: saranno mostrati una lista di ultimi report per data, un grafico con i report type per quella regione e la quantita di report totali e i 5 player con piu report, la regione puo' essere editata nella pagina personale oppure manualmente in una label della homePage. L' utente non registrato nella homePage vedra la regione in base al suo indirizzo Ip. Una Pagina del Player in cui vengono mostrati tutti i suoi report  piu una lista di report type e per quante volte e’ stato reportato per quel tipo di report ed una chat tipo muro della cogna .  Pagina del Utente Registrato in cui vengono mostrati tutti i Report fatti,  piu alcune info. Una pagina di Registrazione , Login ed Una per fare il Report. 
					FEATURE LIST
* L utente deve essere in grado di registrarsi al sito: 
*  L utente deve poter fare il login
*  L  utente loggato puo gestire il suo profilo
*  L utente loggato puo' cambiare / recuperare password
*  L utente loggato  puo recuperare il suo nick      
*  L utente loggato puo reportare 
*  L utente loggato puo cancellare i suoi report
* L' utente puo editare il suo report
*  L utente loggato puo commentare   	
* L utente loggato puo cancellare i suoi commenti   
*L utente loggato puo editare i sui commenti
*  nella  HompePage  viene mostrato l utlimo report dei player piu' una lista di top report player. HomePage
*  la HomePage se e' visitata da un utente loggato vedra i report in base alla regione iscritto , se e' un utente anonimo vedra i report in base al suo ip 
*  Una pagina del Player in cui veranno mostrati tutti i suoi report piu alcune info : PlayerPage
*  una pagina del Utente Registrato in cui veranno mostrati tutti i report fatti piu alcune info: UserPage
* L admin puo fare operazioni crud  utenti
*  il super admin puo' gestire l inteo sistema

			BREAK UP THE PROBLEM
MODULES:
Repository:gestiamo gli accessi al db
Service:business logic
Config: gestiamo le autentificazioni
Exception: controllo delle eccezioni
Utils
Validator: classi che si occupano di validare i campi dei form
Constraint: interfaccie che si occupano di validare i campi
Controller: qui controlliamo il flusso dei dati sia dal model verso la view che dalla view verso il model
Model : qui abbiamo le Enties (Comment, Player,User) sono dei POJO 



ITERATING OVER PIECE OF FUNCTIONALITY
FIRST ITERATION
TRASFORMIAMO (L utente deve essere in grado di registrarsi al sito) IN UN SET DI REQUISITI 
			Architecture
What's significant?
* L utente deve essere in grado di registrarsi al sito: Q1
*  L utente deve poter fare il login Q1
*  L utente loggato puo fare il report Q1



Use Case Registrazione 

*Triggered: L’ utente clicca il link “Registrazione”
*Precondition: L’ Utente non e’ loggato 
*Guarante: L’Utente diventa un utente registrato nel sistema

*Main success scenario:

1)L’ Utente inserisce il nickname
2)L’ Utente inserisce la password
3)L’ Utente inserisce la seconda password
4)L’ Utente inserisce l’ email
5)L’ Utente inserisce la regione del server che gioca
Submit
6)Il sistema controlla se sono stati inseriti tutti i campi
7)Il sistema controlla se le due password sono uguali
8)Il sistema controlla se il nickname esiste gia’ nel sistema
9)il sistema registra nel sistema il nuovo utente con i campi dati(nickname, password,email) senza abilitarlo 
10)Il sistema invia un token tramite email all’ utente per abilitarlo nel sistema
11)il sistema abilita l utente

*Extensions:

6a)se non sono stati inseriti tutti i campi:
1)Il sistema indica il campo obbligatorio 
7a)le due password non sono uguali
1)Il sistema indica che le due password non sono uguali
8a)nickname gia’ in uso
1)Il sistema indica di usare un altro nickname
10a)il token inviato e’ scaduto
1)il sistema avverte che il token e’ scaduto  ed e’ possibile richiedere un altro


Analisi del testo per trovare concetti  e verbi

Concetti 

Utente: Una classe che e’ gia nel modello concettuale, Enitity
Sistema: da definire meglio
Campi: campi del form, una classe che mostra i campi del form
Token: semplice stringa alfanuerica inviata tramite email all’utente
Email: Una classe che e’ gia nel modello concettuale 

Verbi o espressioni che indicano i sostantivi 

Inserire nickname, password, email,regione: form, questo concetto fa parte della view
Controlla se sono stati inseriti tutti i campi: classe Validation che verifica se tutti i campi sono stati inseriti
controlla se le due password sono uguali: classe Validation che verifica se le due password corrispondono
controlla se il nickname esiste gia’ nel sistema: UserRepository
registra nel sistema il nuovo utente senza abilitarlo: la calsse di servizio  si puo occupare della logica di business mentre la repository di salvarlo nel sistema, inoltre bisogna creare una condizione che indica se l’utente e abilitato(creare una boolean nel modello user che indica se l utente e’ abilitato’ oppure no)
invia un token tramite email: la classe email potrebbe occuparsi di inviare un token
abilita l utente: UserRepository 



USE CASE LOGIN USER

*Triggered: User selects the “Login” link 
*Precondition : The user is  not yet logged in 
*Guarantee: The User can report the player and access the his/her page
* Main success scenario:
1)L’utente inserisce il suo nickname
2)L’utente inserisce la sua password
Login
3)Il sistema controlla se sono stati inseriti tutti i campi
4)il sistema crea’ una nuova sessione per l’utente loggato

*Extensions:
1a)L’utente inserisce un nickname non valido:
1)Il sistema informa che il nickname non esiste
2a)L’ utente inserisce una password non valida
1)il sistema informa che la password non e’ valida
3a)Se non sono stai inseriti tutti i campi:
1)il sistema informa il campo da riempire

Analisi del testo per trovare concetti  e verbi

Concetti 

Utente: una classe che e’ gia’ nel modello concettuale, Entity
Nickname,Password: attributi che fanno parte della classe Utente
Sessione: studiare cosa e’ una sessione nel contesto di spring

Verbi o espressioni che indicano i sostantivi 
                              
L utente inserisce password e nickname: classe LoginDto,UserController
Il sistema controlla se sono stati inseriti tutti i campi: una Classe UserLoginValidator che si occupa di controllare se i dati sono stati inseriti 
il sistema crea’ una nuova sessione per l’utente:da capire la sessione in  spring boot
L’utente inserisce un nickname non valido:  la classe Service controlla se l utente esiste
L’ utente inserisce una password non valida: la classe Service controlla sla password
Il sistema informa che il nickname non esiste: classe UserException che gesisce gli errori
il sistema informa che la password non e’ valida: classe UserException che gesisce gli errori

CLASSI 
Utente: gia’ fa parte del sistema
UserController: Gestisce gli endpoint (api)
Session: spring gestisce , da non implementare
UserService: gia inclusa nel sistema
UserException: lancia un eccezione se l utente non esiste
LoginValidator: controlla se i campi sono stati inseriti
UserDto:passa i dati all service

VERBI
inserisce username e password
controlla se sono stati inseriti tutti i campi
cerca se esiste l username nel db
crea una nuova sessione 
l utente non esiste
password non valida
campo da riempire


USE CASE CHANGE PASSWORD

*Triggered: User selects the “Reset Password” link
*Precondition The User must  be logged in and must be registered in the system
*Guarantee  Password changed

*Main Scenario
1)l utente inserisce la password attuale
2)l utente inserisce la nuova password
3)l utente inserisce la password di conferma
Submit
5)il sistema controlla se i campi sono stati inseriti correttamente 
6)il sistema controlla se la password attuale e’ uguale alla password corrente
7)il sistema aggiorna la password

*Extensions:
5a)se i campi non sono stati inseriti correttamente
1)il sistema avverte quale campo non e’ stato inserito corretamente 
6a)la password attuale e’ diversa dalla password corrente
1)il sistema avverte di inserire la password corretta

Analisi del testo per trovare concetti  e verbi



             spressioni che indicano concetti e verbi
l utente inserice password attuale, nuova password e pass di conferma: Form con 3 input, ResetPasswordDto
il sistema controlla se i campi sono stati inseriti correttamente: UserController(raccolta dati + redirect), ResetPasswordValidator(si occupa di controllare se i dati inseriti sono corretti)
il sistema controlla se la password attuale e’ uguale alla password corrente: UserServce (fetch della password)
il sistema aggiorna la password: UserService (update password)

                                                 		CLASSI
ResetPasswordDto,UserService,UserController
                	VERBI
fetchPassword, update

USER CASE SEND TOKEN FORGOT PASSWORD

*Triggered user selects the “forgot password” link
*Precondition the user must not be logged
*Guarance send token via email

*Main Scenario
1) L utente inserisce l email 
submit
2)il sistema controlla se e’ stato inserita l email nel campo
3)il sistema controlla se esiste l email
4)il sistma invia il token al email del utente

*Extensions:
2a)se non e’ stata inserita l email
1)il sismtema avverte che il campo non puo’ essere vuoto
3a)il sistema non trova l email
1)il sistema avverte di inserire un email valida

Sostantivi
User, Sistema, Token, Email
VERBI
inserisce, controlla , esiste, invia il token , non trova l email


USE CASE CLICK TOKEN VIA EMAIL FORGOT PASSWORD

*Triggered user click  the “token” via email 
*Precondition the user must not be logged
*Guarance password changed in the  system

*Main Scenario
1)il sistema controlla che il token esiste nel sistema
2)il sistema controlla che il token e’ valido
3)l utente inserisce la nuova password
4)l utente inserisce la nuova password di conferma
submit
5)il sistema controlla se sono stati inserite le password nei campi corrispondenti
6)il sistma controlla se le due password sono uguali
7)il sistema aggionra la password
8)il sistema invia una email avvertendo che la password  e’ stata cambiata con successo 


1a)se il token non eiste nel sistema
1)il sistema avverte di ripetere la procedura della pass dimenticta
2a)se il token non e’ valido
1)il sistema avverte di ripetere la procedura della pass dimenticta
3a) l utente non inserisce la password
1)il sistema avverte di inserire la password
4a) l utente non inserisce la password di conferma
1)il sistema avverte di inserire la password di conferma


ANALISI DEL TESTO PER TROVARE VERBI E CONCETTI

       

spressioni che indicano concetti e verbi

L utente inserisce l email: una View  che ha  un FORM per inserire l email, L UserController tramite il metodo forgotPassword gestisce l elaborazione
il sistema controlla se e’ stato inserita l email nel campo: un Validator che controlla che il campo non e’ vuoto
il sistema controlla se esiste l email: la UserService si occupa di trovare (findByEmail) l email 
il sistma invia il token al email del utente: L EmailService si occupa di inviare il tonken
l utente inserisce la nuova password: Una View che ha un Form per inserire la nuova password
l utente inserisce la nuova password di conferma
il sistema controlla se sono stati inserite le password nei campi corrispondenti: Validator che controlla i campi
il sistma controlla se le due password sono uguali: Validator che si occupa di convalidare le password
il sistema aggionra la password: UserService si occupa di updatePassword la password
il sistema invia una email avvertendo che la password  e’ stata cambiata con successo: EmailService si occupa di inviare la passowrd
il sismtema avverte che il campo non puo’ essere vuoto Validator controlla che il campo non e’ vuoto
il sistema avverte di inserire un email valida:  il UserController avverte di inserire una email valida

CLASSI

UserService, EmailService,Validator,UserController

VERBI

findByEmail, updatePassword, forgotPassword


				USE CASE FORGOT USERNAME 

*Triggered: User selects the “Forgot username” link
*Precondition: The user not must be logged in 
*Guarantee:  an e mail will be sent to the user
*Main scenario 

1)L’ utente inserisce l email
submit
2)il sistema controlla che l utente ha inserito l email
3)il sistema controlla che l email e’ valida
4)il sistema controlla che l email esiste nel sistema
5)il sistema invia un email al utente con l’ username

*Extensions:
2a)se non e’ stata inserita l email
1)il sistema avverte di inserire l email
3a)l’ utente inserisce una email non valida
1)il sistema avverte di inserire una email valida 
4a)l’ email non esiste nel sistema
1a)il sistema avverte che l’ email non esiste nel sistema
5a)il sistema non riesce ad inviare l’email
1a)il sistema avverte che non riesce ad inviare l’email



ANALISI DEL TESTO PER TROVARE METODI E CLASSI

SOSTANTIVI
Sistema,Utente,EMAIL.

     VERBI
inserisce l’ email, valida, esiste, invia, avverte, valida,inviare l email

     CLASSI
eistono gia  nel modello del dominio
     METODI
esistono gia nel modello del dominio



USE CASE CHANGE PASSWORD


*Triggere: User selectes the “Change password” link
*Precondition: The user must be logged in
*Guarantee:  password changed
*Main Scenario
1)L’ utente inserisce la password attuale
2)L’ utente inserisce la password nuova
3)L’ utente inserisce la password di conferma
submit
4)Il sistema controlla che tutti i campi sono sono stati riempiti
5)il sistema controlla se la password attuale e’ corretta
6)il sistema controlla se la nuova password e’ valida
7)il sistema salva la nuova password

*Alternative Scenario
4a)se i campi non sono stati inseriti
1a)il sistema avverte che i campi sono obbligatori
5a)se la password attuale non e’ coretta 
1a)il sistema avverte che la password non e’ corretta
6a)se la password non e’ valida
1a)il sistema avverte di inserire una password valida
7a)il sistema non salva la password
1a)il sistema avverte che c’e’ un errore

SOSTANTIVI
sistema,password,utente,valida,campi
VERBI
inserisce, controlla,riempiti,
CLASSI
Password attuale, nuova e di conferma(PasswordDto)
 METODI
esistono gia nel modello del dominio









USE CASE REPORT PLAYER 

*Triggered: User selects the “Report Player” link
*Precondition: The user must be logged in 
*Guarantee:  Report is   saved in the database 
*Main scenario 

*Main scenario 
1)the user insert  the player’s nickname in an input field
2)the user must select from a select input, the region of the player
3)the user must select the report type from a select input 
4)the user insert the report description in a text input
submit
5)the system checks that all fields are not empty
6)the system checks if  the player already exists
7)the system checks  if  the player’ report types already exists
8)the system saves the player in the database and associates the user’s id to the report
*Extensions:
5a)if the fields are empty
1)the system warns that the fields are required
6a)if the player already exists
1)the system save the report,and report type associated with the player
6a)if the player doesn’t exist
1)the system save player, save report and  save report type and associated report , report type  to  player
7a)if the platyer’s report type already exist
1)the system increases the count of the report type by one
7b)if the player’s report type not exist
1)the system save the new report type


CLASS
 player, region(ogni player,report e report type devono essere inserire nella propria regione), report type, report 

VERBI
system checks field,  player already exists, system save, system save player, system save report , system save report type, system increase by one report type.





USE CASE DELETE REPORT

*Triggered : User selects “Delete Report” link
*Precondition: the report was made by the user
*Guarantee: The report will be deleted

*Main Scenario
1)The user click on delete Report
2)The system find description report by entity itself
3)the system check if count of player is more than one. Yes: the system.
just decrement by one player count. Else: the system delete player
4)the system delete description report
5)the system find report type by entity itself
6)the system check if report type count is more than one, if yes the system just decrement report type else delete report type
*Extension
2a)if the description report doesn’t exists
1a)the system return EntityNotExistException
5a)if the report type doesn’t exists
1a)the system return EntityNotExistException


CLASS
EntityNotExistException, player count
				VERBS

delete Reportm, find description report by entity ,  check if count of player is more than one
decrement by one player count,delete description report,find report type by entit,
check if report type count is more than one,decrement report type else delete report type
delete report typeS


USE CASE EDIT REPORT

*Triggered: user select “edit report” link
*Precondition: the report was mage by the user 
*Guarantee: the report will be edited

*Main Scenario
1)The user click on edit report
2)the system find report by id
3)the system redirects the user to the form report page, with all the fields filled with current report
4)the user edits some fields
submit
5)the system delete  old report on db
6)the system save  new report in db
*Extension
2a)if report doesn’t exist
1a)the system throws an error
4a)if user leaves any fields blank 
1a)the system throws an error


CLASS
Report,User,System,Form Report,
VERBS
Edit Report, find Report By Id, Fill fields, Save new report, Delete old report



        USE CASE L’ UTENTE PUO COMMENTARE I REPORT

*Triggered: User click on comment link
*Precondition: User must be logged
*Gauranatee: the comment will be created

*Main Scenario
1)user click in comment link
2)the user insert a comment
submit
3)the system will save the comment(fields: comment,id_report,id_user) in the report region

*Extension
2a)the user leave comment in blank
1)the system block submit


CLASSI
User,Comment(Entity for every region)
VERBS
Insert a comment,save the comment in the report region






USE CASE GET LAST 5 PLAYERS WITH THE MOST REPORTS AND THEIR REPORT TYPES

*Triggered:  home page
*Precondition:  the user go in home page
*Guarantee: user can see them 

*Main Scenario
1)the user go in home page
2)client requires the 5 players with the most reports and their report types
3)the system fetch 5 players with the most reports
4)the system fetch the report types for every players;

*Extension 
3a) the system don’t return the  players
1)the system return nothing
4a)the system dont’ return the report types
1)the system return nothing

CLASSI
HOME PAGE
VERBI
fetch 5 player with the most reports






USE CASE PAGINATION REPORT IN PLAYER PAGE

*Triggered: player page
*Precondition: the user go in player page
*Guarantee: user can scroll the page 

*Main Scenario
1)the user go in player page or scroll the player page
2)the system get n report’s player
   2.1)the sytem return nothing
3)the user scroll page
4)the system get n report’s player
  4.1)the system return nothing

CLASS
METHOD
get n report’s player
USE CASE GET ALL PLAYER’REPORT TYPE

*Triggered: player’s page
*Precondition: the user go in player’s page
*Guarantee: get report type

*Main Scenario
1)The user go in player’page
2)The system get all player’report type by player id
2a)The system return nothing

CLASS
METHOD
report type by player id

USE CASE INSERT COMMENT 

*Triggered: user submit
*Precondition: user must be logged
*Guarantee: will be inserted in the database

*Main Scenario
1)the user insert comment in the input field
2)user click on submit 
3)the system check if data are valid
3a)data are invalid
3a1)the System print the error messages
4)comment is saved in the database

CLASS

METHOD
 is saved 





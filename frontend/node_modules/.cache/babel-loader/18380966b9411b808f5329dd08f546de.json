{"ast":null,"code":"import axios from \"axios\";\nimport Cookies from 'js-cookie';\nimport authHeader from '../service/auth-header';\nimport { serverProxy } from './server-proxy-constant';\nconst API_URL_SIGNIN = \"/api/v1/authentication/\";\nconst API_URL_SIGNUP = \"/api/v1/registration/\";\nconst API_URL_FORGOT_PASSWORD = \"/api/v1/users/accounts/update_forgot_password\";\nconst API_URL_SEND_EMAIL_FORGOT_PASSWORD = serverProxy + \"/api/v1/users/accounts/email/email_token\";\nconst API_URL_UPDATE_PASSWORD = \"/api/v1/users/accounts/update_password\";\nconst API_URL_VERIFY_USER_EXISTS = \"/api/v1/users/username/\";\nconst API_URL_VERIFY_EMAIL_EXISTS = \"/api/v1/users/\";\nconst headers = authHeader();\nconst region = localStorage.getItem(\"userRegion\");\n\nconst forgotPassword = (password, confirmPassword, token) => {\n  return axios.post(API_URL_FORGOT_PASSWORD, {\n    password,\n    confirmPassword,\n    token\n  }).then(response => {\n    return response.status;\n  }).catch(error => {\n    return error.response.status;\n  });\n};\n\nconst updatePassword = (oldPassword, password, confirmPassword) => {\n  return axios.post(API_URL_UPDATE_PASSWORD, {\n    oldPassword,\n    password,\n    confirmPassword\n  }, headers).then(response => {\n    return response.status;\n  });\n};\n\nconst sendEmailForgotPassword = email => {\n  return axios.post(API_URL_SEND_EMAIL_FORGOT_PASSWORD, {\n    email\n  }).then(response => {\n    console.log(response);\n    return response.status;\n  }).catch(error => {\n    console.log(error);\n  });\n};\n\nconst register = (username, email, password, confirmPassword) => {\n  return axios.post(API_URL_SIGNUP, {\n    username,\n    email,\n    password,\n    confirmPassword,\n    region\n  });\n};\n\nconst login = (username, password) => {\n  return axios.post(API_URL_SIGNIN, {\n    username,\n    password\n  }).then(response => {\n    if (response.data) {\n      localStorage.setItem(\"userToken\", response.data);\n      setCurrentUser(response.data);\n      return response;\n    }\n  });\n};\n\nconst verifyUserExists = username => {\n  return axios.get(API_URL_VERIFY_USER_EXISTS + username).then(response => {\n    return response;\n  }).catch(error => {});\n};\n\nconst verifyEmailExists = email => {\n  return axios.get(API_URL_VERIFY_EMAIL_EXISTS + email).then(response => {\n    return response;\n  }).catch(error => {});\n};\n\nconst logout = () => {\n  Cookies.remove(\"wtu\");\n};\n\nconst getCurrentUser = () => {\n  return Cookies.get(\"wtu\");\n};\n\nconst setCurrentUser = jwt => {\n  return Cookies.set('wtu', jwt, {\n    expires: 7\n  });\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  verifyUserExists,\n  verifyEmailExists,\n  updatePassword,\n  sendEmailForgotPassword,\n  forgotPassword\n};","map":{"version":3,"sources":["C:/Users/kartu/Desktop/LeagueOfReport-frontend/src/service/auth.service.js"],"names":["axios","Cookies","authHeader","serverProxy","API_URL_SIGNIN","API_URL_SIGNUP","API_URL_FORGOT_PASSWORD","API_URL_SEND_EMAIL_FORGOT_PASSWORD","API_URL_UPDATE_PASSWORD","API_URL_VERIFY_USER_EXISTS","API_URL_VERIFY_EMAIL_EXISTS","headers","region","localStorage","getItem","forgotPassword","password","confirmPassword","token","post","then","response","status","catch","error","updatePassword","oldPassword","sendEmailForgotPassword","email","console","log","register","username","login","data","setItem","setCurrentUser","verifyUserExists","get","verifyEmailExists","logout","remove","getCurrentUser","jwt","set","expires"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport Cookies from 'js-cookie';\r\nimport authHeader from '../service/auth-header';\r\nimport {serverProxy} from './server-proxy-constant';\r\n\r\n\r\nconst API_URL_SIGNIN = \"/api/v1/authentication/\";\r\nconst API_URL_SIGNUP = \"/api/v1/registration/\";\r\nconst API_URL_FORGOT_PASSWORD = \"/api/v1/users/accounts/update_forgot_password\"\r\nconst API_URL_SEND_EMAIL_FORGOT_PASSWORD = serverProxy+\"/api/v1/users/accounts/email/email_token\";\r\nconst API_URL_UPDATE_PASSWORD = \"/api/v1/users/accounts/update_password\";\r\nconst API_URL_VERIFY_USER_EXISTS = \"/api/v1/users/username/\";\r\nconst API_URL_VERIFY_EMAIL_EXISTS = \"/api/v1/users/\";\r\n\r\n\r\n\r\nconst headers =   authHeader() ;\r\nconst region = localStorage.getItem(\"userRegion\")\r\n\r\n\r\nconst forgotPassword = (password,confirmPassword,token) => {\r\n    return axios.post(API_URL_FORGOT_PASSWORD,{password,confirmPassword,token}).then(\r\n        (response) => {\r\n            return response.status;\r\n        })\r\n        .catch((error)=>{\r\n            return error.response.status;\r\n        });\r\n};\r\n\r\nconst updatePassword = (oldPassword, password, confirmPassword) => {\r\n    return axios.post(API_URL_UPDATE_PASSWORD, {\r\n        oldPassword, password, confirmPassword\r\n    }, headers)\r\n        .then((response) => {\r\n            return response.status\r\n        })\r\n};\r\n\r\nconst sendEmailForgotPassword = (email) => {\r\n    return axios.post(API_URL_SEND_EMAIL_FORGOT_PASSWORD, { email }).then(\r\n        (response) => {\r\n            console.log(response)\r\n            return response.status\r\n        })\r\n        .catch(\r\n            (error) => {\r\n                console.log(error)\r\n            });\r\n};\r\n\r\nconst register = (username, email, password, confirmPassword) => {\r\n    return axios.post(API_URL_SIGNUP, {\r\n        username,\r\n        email,\r\n        password,\r\n        confirmPassword,\r\n        region,\r\n    });\r\n};\r\n\r\n\r\n\r\nconst login = (username, password) => {\r\n    return axios\r\n        .post(API_URL_SIGNIN, {\r\n            username,\r\n            password,\r\n        })\r\n        .then((response) => {\r\n\r\n            if (response.data) {\r\n                localStorage.setItem(\"userToken\", response.data);\r\n                setCurrentUser(response.data)\r\n                return response;\r\n            }\r\n\r\n        });\r\n};\r\n\r\nconst verifyUserExists = (username) => {\r\n    return axios.get(API_URL_VERIFY_USER_EXISTS+username).then(\r\n        (response) => {\r\n            return response\r\n        })\r\n        .catch(error => {\r\n        });\r\n};\r\n\r\nconst verifyEmailExists = (email) => {\r\n    return axios.get(API_URL_VERIFY_EMAIL_EXISTS+email).then(\r\n        (response) => {\r\n            return response\r\n        })\r\n        .catch(error => {\r\n        });\r\n};\r\n\r\nconst logout = () => {\r\n    Cookies.remove(\"wtu\");\r\n};\r\n\r\n\r\nconst getCurrentUser = () => {\r\n    return Cookies.get(\"wtu\");\r\n};\r\n\r\nconst setCurrentUser = (jwt) => {\r\n    return Cookies.set('wtu',jwt,{expires:7});\r\n}\r\nexport default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n    verifyUserExists,\r\n    verifyEmailExists,\r\n    updatePassword,\r\n    sendEmailForgotPassword,\r\n    forgotPassword,\r\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from \"axios\";\nimport Cookies from 'js-cookie';\nimport authHeader from '../service/auth-header';\nconst API_URL_SIGNIN = \"api/v1/authentication/\";\nconst API_URL_SIGNUP = \"api/v1/registration/\";\nconst API_URL_FORGOT_PASSWORD = \"api/v1/users/accounts/update_forgot_password\";\nconst API_URL_SEND_EMAIL_FORGOT_PASSWORD = \"api/v1/users/accounts/email/email_token\";\nconst headers = authHeader();\nconst region = localStorage.getItem(\"userRegion\");\n\nconst forgotPassword = (password, confirmPassword, token) => {\n  console.log();\n  return axios.post(API_URL_FORGOT_PASSWORD, {\n    password,\n    confirmPassword,\n    token\n  }).then(response => {\n    return response.status;\n  }).catch(error => {\n    return error.response.status;\n  });\n};\n\nconst updatePassword = (oldPassword, password, confirmPassword) => {\n  return axios.post(\"http://192.168.1.235:8080/api/v1/users/accounts/update_password\", {\n    oldPassword,\n    password,\n    confirmPassword\n  }, headers).then(response => {\n    return response.status;\n  });\n};\n\nconst sendEmailForgotPassword = email => {\n  return axios.post(API_URL_SEND_EMAIL_FORGOT_PASSWORD, {\n    email\n  }).then(response => {\n    return response.status;\n  }).catch(error => {\n    console.log(error);\n  });\n};\n\nconst register = (username, email, password, confirmPassword) => {\n  return axios.post(API_URL_SIGNUP, {\n    username,\n    email,\n    password,\n    confirmPassword,\n    region\n  });\n};\n\nconst login = (username, password) => {\n  return axios.post(API_URL_SIGNIN, {\n    username,\n    password\n  }).then(response => {\n    if (response.data) {\n      localStorage.setItem(\"userToken\", response.data);\n      setCurrentUser(response.data);\n      return response;\n    }\n  });\n};\n\nconst verifyUserExists = username => {\n  const url = \"http://192.168.1.235:8080/api/v1/users/username/\" + username;\n  return axios.get(url).then(response => {\n    return response;\n  }).catch(error => {});\n};\n\nconst verifyEmailExists = email => {\n  const url = \"http://192.168.1.235:8080/api/v1/users/\" + email;\n  return axios.get(url).then(response => {\n    return response;\n  }).catch(error => {});\n};\n\nconst logout = () => {\n  Cookies.remove(\"wtu\");\n};\n\nconst getCurrentUser = () => {\n  return Cookies.get(\"wtu\");\n};\n\nconst setCurrentUser = jwt => {\n  return Cookies.set('wtu', jwt, {\n    expires: 7\n  });\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  verifyUserExists,\n  verifyEmailExists,\n  updatePassword,\n  sendEmailForgotPassword,\n  forgotPassword\n};","map":{"version":3,"sources":["C:/Users/kartu/Desktop/ReportPlayer/src/main/reactjs/src/service/auth.service.js"],"names":["axios","Cookies","authHeader","API_URL_SIGNIN","API_URL_SIGNUP","API_URL_FORGOT_PASSWORD","API_URL_SEND_EMAIL_FORGOT_PASSWORD","headers","region","localStorage","getItem","forgotPassword","password","confirmPassword","token","console","log","post","then","response","status","catch","error","updatePassword","oldPassword","sendEmailForgotPassword","email","register","username","login","data","setItem","setCurrentUser","verifyUserExists","url","get","verifyEmailExists","logout","remove","getCurrentUser","jwt","set","expires"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport Cookies from 'js-cookie';\r\nimport authHeader from '../service/auth-header';\r\n\r\n\r\nconst API_URL_SIGNIN = \"api/v1/authentication/\";\r\nconst API_URL_SIGNUP = \"api/v1/registration/\";\r\nconst API_URL_FORGOT_PASSWORD = \"api/v1/users/accounts/update_forgot_password\"\r\nconst API_URL_SEND_EMAIL_FORGOT_PASSWORD = \"api/v1/users/accounts/email/email_token\";\r\n\r\n\r\nconst headers =   authHeader() ;\r\nconst region = localStorage.getItem(\"userRegion\")\r\n\r\n\r\nconst forgotPassword = (password,confirmPassword,token) => {\r\n    console.log()\r\n    return axios.post(API_URL_FORGOT_PASSWORD,{password,confirmPassword,token}).then(\r\n        (response) => {\r\n            return response.status;\r\n        })\r\n        .catch((error)=>{\r\n            return error.response.status;\r\n        });\r\n};\r\n\r\nconst updatePassword = (oldPassword, password, confirmPassword) => {\r\n    return axios.post(\"http://192.168.1.235:8080/api/v1/users/accounts/update_password\", {\r\n        oldPassword, password, confirmPassword\r\n    }, headers)\r\n        .then((response) => {\r\n            return response.status\r\n        })\r\n};\r\n\r\nconst sendEmailForgotPassword = (email) => {\r\n    return axios.post(API_URL_SEND_EMAIL_FORGOT_PASSWORD, { email }).then(\r\n        (response) => {\r\n            return response.status\r\n        })\r\n        .catch(\r\n            (error) => {\r\n                console.log(error)\r\n            });\r\n};\r\n\r\nconst register = (username, email, password, confirmPassword) => {\r\n    return axios.post(API_URL_SIGNUP, {\r\n        username,\r\n        email,\r\n        password,\r\n        confirmPassword,\r\n        region,\r\n    });\r\n};\r\n\r\n\r\n\r\nconst login = (username, password) => {\r\n    return axios\r\n        .post(API_URL_SIGNIN, {\r\n            username,\r\n            password,\r\n        })\r\n        .then((response) => {\r\n\r\n            if (response.data) {\r\n                localStorage.setItem(\"userToken\", response.data);\r\n                setCurrentUser(response.data)\r\n                return response;\r\n            }\r\n\r\n        });\r\n};\r\n\r\nconst verifyUserExists = (username) => {\r\n    const url = \"http://192.168.1.235:8080/api/v1/users/username/\" + username;\r\n    return axios.get(url).then(\r\n        (response) => {\r\n            return response\r\n        })\r\n        .catch(error => {\r\n        });\r\n};\r\n\r\nconst verifyEmailExists = (email) => {\r\n    const url = \"http://192.168.1.235:8080/api/v1/users/\" + email;\r\n    return axios.get(url).then(\r\n        (response) => {\r\n            return response\r\n        })\r\n        .catch(error => {\r\n        });\r\n};\r\n\r\nconst logout = () => {\r\n    Cookies.remove(\"wtu\");\r\n};\r\n\r\n\r\nconst getCurrentUser = () => {\r\n    return Cookies.get(\"wtu\");\r\n};\r\n\r\nconst setCurrentUser = (jwt) => {\r\n    return Cookies.set('wtu',jwt,{expires:7});\r\n}\r\nexport default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n    verifyUserExists,\r\n    verifyEmailExists,\r\n    updatePassword,\r\n    sendEmailForgotPassword,\r\n    forgotPassword,\r\n};"]},"metadata":{},"sourceType":"module"}
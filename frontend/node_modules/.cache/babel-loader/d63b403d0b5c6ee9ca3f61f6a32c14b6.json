{"ast":null,"code":"import axios from \"axios\";\nimport { Cookies } from 'js-cookie';\nconst API_URL_SIGNIN = \"http://192.168.1.235:8080/api/v1/authentication/\";\nconst API_URL_SIGNUP = \"http://192.168.1.235:8080/api/v1/registration/\";\nconst API_URL_REPORT = \"http://localhost:8080/api/v1/reports\";\nconst API_URL_UPDATE_PASSWORD = \"http://localhost:8080/api/v1/users/1/account/update_password\";\nconst token = localStorage.getItem(\"userToken\");\nconst headers = {\n  headers: {\n    \"Bearer\": token\n  }\n};\nconst region = localStorage.getItem(\"userRegion\");\n\nconst forgotPassword = (password, confirmPassword, token) => {\n  const url = \"http://192.168.1.235:8080/api/v1/users/accounts/update_forgot_password\";\n  return axios.post(url, {\n    password,\n    confirmPassword,\n    token\n  }).then(response => {\n    return response.status;\n  }).catch(error => {\n    return error.response.status;\n  });\n};\n\nconst updatePassword = (oldPassword, password, confirmPassword) => {\n  return axios.post(\"http://192.168.1.235:8080/api/v1/users/accounts/update_password\", {\n    oldPassword,\n    password,\n    confirmPassword\n  }, headers).then(response => {\n    return response.status;\n  });\n};\n\nconst sendEmailForgotPassword = email => {\n  const url = \"http://192.168.1.235:8080/api/v1/users/accounts/email/email_token\";\n  return axios.post(url, {\n    email\n  }).then(response => {\n    return response.status;\n  }).catch(error => {\n    console.log(error);\n  });\n};\n\nconst register = (username, email, password, confirmPassword) => {\n  return axios.post(API_URL_SIGNUP, {\n    username,\n    email,\n    password,\n    confirmPassword,\n    region\n  });\n};\n\nconst login = (username, password) => {\n  return axios.post(API_URL_SIGNIN, {\n    username,\n    password\n  }).then(response => {\n    if (response.data) {\n      // localStorage.setItem(\"userToken\", response.data);\n      return response;\n    }\n  });\n};\n\nconst verifyUserExists = username => {\n  const url = \"http://192.168.1.235:8080/api/v1/users/username/\" + username;\n  return axios.get(url).then(response => {\n    return response;\n  }).catch(error => {});\n};\n\nconst verifyEmailExists = email => {\n  const url = \"http://192.168.1.235:8080/api/v1/users/\" + email;\n  return axios.get(url).then(response => {\n    return response;\n  });\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"userToken\");\n};\n\nconst getCurrentUser = () => {\n  return localStorage.getItem(\"userToken\");\n};\n\nconst setCurrentUser = jwt => {\n  Cookies.set('wtu', \"jwt\", {\n    expires: 7\n  });\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  verifyUserExists,\n  verifyEmailExists,\n  updatePassword,\n  sendEmailForgotPassword,\n  forgotPassword\n};","map":{"version":3,"sources":["C:/Users/kartu/Desktop/reactjs/src/service/auth.service.js"],"names":["axios","Cookies","API_URL_SIGNIN","API_URL_SIGNUP","API_URL_REPORT","API_URL_UPDATE_PASSWORD","token","localStorage","getItem","headers","region","forgotPassword","password","confirmPassword","url","post","then","response","status","catch","error","updatePassword","oldPassword","sendEmailForgotPassword","email","console","log","register","username","login","data","verifyUserExists","get","verifyEmailExists","logout","removeItem","getCurrentUser","setCurrentUser","jwt","set","expires"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {Cookies} from 'js-cookie';\r\n\r\nconst API_URL_SIGNIN = \"http://192.168.1.235:8080/api/v1/authentication/\";\r\nconst API_URL_SIGNUP = \"http://192.168.1.235:8080/api/v1/registration/\";\r\nconst API_URL_REPORT = \"http://localhost:8080/api/v1/reports\";\r\nconst API_URL_UPDATE_PASSWORD = \"http://localhost:8080/api/v1/users/1/account/update_password\";\r\n\r\n\r\nconst token = localStorage.getItem(\"userToken\");\r\nconst headers = { headers: { \"Bearer\": token } };\r\nconst region = localStorage.getItem(\"userRegion\")\r\n\r\n\r\nconst forgotPassword = (password,confirmPassword,token) => {\r\n    const url = \"http://192.168.1.235:8080/api/v1/users/accounts/update_forgot_password\";\r\n    return axios.post(url,{password,confirmPassword,token}).then(\r\n        (response) => {\r\n            return response.status;\r\n        })\r\n        .catch((error)=>{\r\n            return error.response.status;\r\n        });\r\n};\r\n\r\nconst updatePassword = (oldPassword, password, confirmPassword) => {\r\n    return axios.post(\"http://192.168.1.235:8080/api/v1/users/accounts/update_password\", {\r\n        oldPassword, password, confirmPassword\r\n    }, headers)\r\n        .then((response) => {\r\n            return response.status\r\n        })\r\n};\r\n\r\nconst sendEmailForgotPassword = (email) => {\r\n    const url = \"http://192.168.1.235:8080/api/v1/users/accounts/email/email_token\";\r\n    return axios.post(url, { email }).then(\r\n        (response) => {\r\n            return response.status\r\n        })\r\n        .catch(\r\n            (error) => {\r\n                console.log(error)\r\n            });\r\n};\r\n\r\nconst register = (username, email, password, confirmPassword) => {\r\n    return axios.post(API_URL_SIGNUP, {\r\n        username,\r\n        email,\r\n        password,\r\n        confirmPassword,\r\n        region,\r\n    });\r\n};\r\n\r\n\r\n\r\nconst login = (username, password) => {\r\n    return axios\r\n        .post(API_URL_SIGNIN, {\r\n            username,\r\n            password,\r\n        })\r\n        .then((response) => {\r\n\r\n            if (response.data) {\r\n               // localStorage.setItem(\"userToken\", response.data);\r\n               \r\n                return response;\r\n            }\r\n\r\n        });\r\n};\r\n\r\nconst verifyUserExists = (username) => {\r\n    const url = \"http://192.168.1.235:8080/api/v1/users/username/\" + username;\r\n    return axios.get(url).then(\r\n        (response) => {\r\n            return response\r\n        })\r\n        .catch(error => {\r\n        });\r\n};\r\n\r\nconst verifyEmailExists = (email) => {\r\n    const url = \"http://192.168.1.235:8080/api/v1/users/\" + email;\r\n    return axios.get(url).then(\r\n        (response) => {\r\n            return response\r\n        });\r\n};\r\n\r\nconst logout = () => {\r\n    localStorage.removeItem(\"userToken\");\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    return localStorage.getItem(\"userToken\");\r\n};\r\n\r\nconst setCurrentUser = (jwt) => {\r\n     Cookies.set('wtu',\"jwt\",{expires:7});\r\n}\r\nexport default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n    verifyUserExists,\r\n    verifyEmailExists,\r\n    updatePassword,\r\n    sendEmailForgotPassword,\r\n    forgotPassword,\r\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kartu\\\\Desktop\\\\reactjs\\\\src\\\\component\\\\updatePassword\\\\UpdatePassword.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { Col, Container, Row } from 'react-bootstrap';\nimport AuthService from '../../service/auth.service';\nimport './UpdatePassword.scss';\n\nconst UpdatePassword = () => {\n  const {\n    register,\n    errors,\n    handleSubmit,\n    watch\n  } = useForm({});\n  const passwordWatched = useRef({});\n  const [message, setMessage] = useState(\"\");\n  passwordWatched.current = watch(\"password\", \"\");\n  const passwordNotFound = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 30\n    }\n  }, \"Password Not Found\");\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    window.location.reload();\n  };\n\n  const handleOpenModal = () => setShowModal(true);\n\n  const onSubmit = data => {\n    AuthService.updatePassword(data.oldPassword, data.password, data.confirmPassword).then(response => {\n      response.status === 200 ? handleOpenModal() : setMessage(passwordNotFound);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Update Password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, message, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"oldPassword\",\n    className: \"form-control mb-2\",\n    type: \"text\",\n    placeholder: \"actual password\",\n    ref: register({\n      required: \"You must type an actual  password\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }), errors.oldPassword && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 40\n    }\n  }, errors.oldPassword.message), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"password\",\n    className: \"form-control mb-2\",\n    type: \"text\",\n    placeholder: \"new password\",\n    ref: register({\n      required: \"You must type a new  password\",\n      minLength: {\n        value: 8,\n        message: \"Password must have at least 8 characters\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }), errors.password && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 37\n    }\n  }, errors.password.message), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"confirmPassword\",\n    className: \"form-control mb-2\",\n    type: \"text\",\n    placeholder: \"confirm password\",\n    ref: register({\n      validate: value => value === passwordWatched.current || \"The passwords do not match\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }), errors.confirmPassword && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 44\n    }\n  }, errors.confirmPassword.message), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"form-control \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default UpdatePassword;","map":{"version":3,"sources":["C:/Users/kartu/Desktop/reactjs/src/component/updatePassword/UpdatePassword.js"],"names":["React","useState","useRef","useEffect","useForm","Col","Container","Row","AuthService","UpdatePassword","register","errors","handleSubmit","watch","passwordWatched","message","setMessage","current","passwordNotFound","handleCloseModal","setShowModal","window","location","reload","handleOpenModal","onSubmit","data","updatePassword","oldPassword","password","confirmPassword","then","response","status","required","minLength","value","validate"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport AuthService from '../../service/auth.service';\r\nimport './UpdatePassword.scss';\r\n\r\n\r\nconst UpdatePassword = () => {\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({});\r\n\r\n    const passwordWatched = useRef({});\r\n\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    passwordWatched.current = watch(\"password\", \"\")\r\n    const passwordNotFound = <p>Password Not Found</p>\r\n\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        window.location.reload();\r\n    }\r\n    const handleOpenModal = () => setShowModal(true);\r\n\r\n    const onSubmit = data => {\r\n        AuthService.updatePassword(data.oldPassword, data.password, data.confirmPassword).then(\r\n            (response) => {\r\n                response.status === 200 ? handleOpenModal() : setMessage(passwordNotFound)\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h5>Update Password</h5>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                {message}\r\n                <input\r\n                    name=\"oldPassword\"\r\n                    className=\"form-control mb-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"actual password\"\r\n                    ref={register({\r\n                        required: \"You must type an actual  password\"\r\n                    })}\r\n                />\r\n                {errors.oldPassword && <p>{errors.oldPassword.message}</p>}\r\n                <input\r\n                    name=\"password\"\r\n                    className=\"form-control mb-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"new password\"\r\n                    ref={register({\r\n                        required: \"You must type a new  password\",\r\n                        minLength: {\r\n                            value: 8,\r\n                            message: \"Password must have at least 8 characters\"\r\n                        }\r\n                    })}\r\n                />\r\n                {errors.password && <p>{errors.password.message}</p>}\r\n                <input\r\n                    name=\"confirmPassword\"\r\n                    className=\"form-control mb-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"confirm password\"\r\n                    ref={register({\r\n                        validate: value =>\r\n                            value === passwordWatched.current || \"The passwords do not match\"\r\n                    })}\r\n                />\r\n                {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>}\r\n                <input type=\"submit\" className=\"form-control \" />\r\n\r\n            </form>\r\n\r\n           \r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default UpdatePassword"]},"metadata":{},"sourceType":"module"}
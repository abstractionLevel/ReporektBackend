{"ast":null,"code":"import axios from \"axios\";\nconst API_URL_SIGNIN = \"http://192.168.1.235:8080/api/v1/public/authentication\";\nconst API_URL_SIGNUP = \"http://192.168.1.235:8080/api/v1/public/registration\";\nconst API_URL_REPORT = \"http://localhost:8080/api/v1/reports\"; //attivare l utente solo se clicca l email di conferma\n\nconst register = (username, email, password, confirmPassword, region) => {\n  return axios.post(API_URL_SIGNUP, {\n    username,\n    email,\n    password,\n    confirmPassword,\n    region\n  });\n};\n\nconst report = (nickname, reportType, description) => {\n  return axios.post(API_URL_REPORT, {\n    nickname,\n    reportType,\n    description\n  }, {\n    headers: {\n      \"Bearer\": getCurrentUser\n    }\n  }).then(response => {\n    console.log(response);\n    return response;\n  });\n};\n\nconst login = (username, password) => {\n  return axios.post(API_URL_SIGNIN, {\n    username,\n    password\n  }).then(response => {\n    if (response.data) {\n      localStorage.setItem(\"userToken\", response.data);\n      return response;\n    }\n  });\n};\n\nconst verifyUserExists = username => {\n  const url = \"http://192.168.1.235:8080/api/v1/users/username/\" + username;\n  return axios.get(url).then(response => {\n    return response;\n  }).catch(error => {});\n};\n\nconst verifyEmailExists = email => {\n  const url = \"http://192.168.1.235:8080/api/v1/users/\" + email;\n  return axios.get(url).then(response => {\n    return response;\n  });\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"userToken\");\n};\n\nconst getCurrentUser = () => {\n  return localStorage.getItem(\"userToken\");\n};\n\nexport default {\n  register,\n  login,\n  logout,\n  getCurrentUser,\n  verifyUserExists,\n  verifyEmailExists,\n  report\n};","map":{"version":3,"sources":["C:/Users/kartu/Desktop/reactjs/src/service/auth.service.js"],"names":["axios","API_URL_SIGNIN","API_URL_SIGNUP","API_URL_REPORT","register","username","email","password","confirmPassword","region","post","report","nickname","reportType","description","headers","getCurrentUser","then","response","console","log","login","data","localStorage","setItem","verifyUserExists","url","get","catch","error","verifyEmailExists","logout","removeItem","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG,wDAAvB;AACA,MAAMC,cAAc,GAAG,sDAAvB;AACA,MAAMC,cAAc,GAAG,sCAAvB,C,CAEA;;AAEA,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,EAA4BC,eAA5B,EAA6CC,MAA7C,KAAwD;AACrE,SAAOT,KAAK,CAACU,IAAN,CAAWR,cAAX,EAA2B;AAC9BG,IAAAA,QAD8B;AAE9BC,IAAAA,KAF8B;AAG9BC,IAAAA,QAH8B;AAI9BC,IAAAA,eAJ8B;AAK9BC,IAAAA;AAL8B,GAA3B,CAAP;AAOH,CARD;;AAUA,MAAME,MAAM,GAAG,CAACC,QAAD,EAAUC,UAAV,EAAqBC,WAArB,KAAqC;AAChD,SAAOd,KAAK,CAACU,IAAN,CAAWP,cAAX,EAA2B;AAC9BS,IAAAA,QAD8B;AACrBC,IAAAA,UADqB;AACVC,IAAAA;AADU,GAA3B,EAEJ;AACCC,IAAAA,OAAO,EAAE;AACL,gBAAUC;AADL;AADV,GAFI,EAONC,IAPM,CAOAC,QAAD,IAAY;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOA,QAAP;AACH,GAVM,CAAP;AAWH,CAZD;;AAcA,MAAMG,KAAK,GAAG,CAAChB,QAAD,EAAWE,QAAX,KAAwB;AAClC,SAAOP,KAAK,CACPU,IADE,CACGT,cADH,EACmB;AAClBI,IAAAA,QADkB;AAElBE,IAAAA;AAFkB,GADnB,EAKFU,IALE,CAKIC,QAAD,IAAc;AAEhB,QAAIA,QAAQ,CAACI,IAAb,EAAmB;AACfC,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCN,QAAQ,CAACI,IAA3C;AACA,aAAOJ,QAAP;AACH;AAEJ,GAZE,CAAP;AAaH,CAdD;;AAgBA,MAAMO,gBAAgB,GAAIpB,QAAD,IAAc;AACnC,QAAMqB,GAAG,GAAG,qDAAmDrB,QAA/D;AACA,SAAOL,KAAK,CAAC2B,GAAN,CAAUD,GAAV,EAAeT,IAAf,CACFC,QAAD,IAAc;AACV,WAAOA,QAAP;AACH,GAHE,EAIFU,KAJE,CAIIC,KAAK,IAAI,CACf,CALE,CAAP;AAMH,CARD;;AAUA,MAAMC,iBAAiB,GAAIxB,KAAD,IAAW;AACjC,QAAMoB,GAAG,GAAG,4CAA0CpB,KAAtD;AACA,SAAON,KAAK,CAAC2B,GAAN,CAAUD,GAAV,EAAeT,IAAf,CACFC,QAAD,IAAc;AACV,WAAOA,QAAP;AACH,GAHE,CAAP;AAIH,CAND;;AAQA,MAAMa,MAAM,GAAG,MAAM;AACjBR,EAAAA,YAAY,CAACS,UAAb,CAAwB,WAAxB;AACH,CAFD;;AAIA,MAAMhB,cAAc,GAAG,MAAM;AACzB,SAAOO,YAAY,CAACU,OAAb,CAAqB,WAArB,CAAP;AACH,CAFD;;AAIA,eAAe;AACX7B,EAAAA,QADW;AAEXiB,EAAAA,KAFW;AAGXU,EAAAA,MAHW;AAIXf,EAAAA,cAJW;AAKXS,EAAAA,gBALW;AAMXK,EAAAA,iBANW;AAOXnB,EAAAA;AAPW,CAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL_SIGNIN = \"http://192.168.1.235:8080/api/v1/public/authentication\";\r\nconst API_URL_SIGNUP = \"http://192.168.1.235:8080/api/v1/public/registration\";\r\nconst API_URL_REPORT = \"http://localhost:8080/api/v1/reports\";\r\n\r\n//attivare l utente solo se clicca l email di conferma\r\n\r\nconst register = (username, email, password, confirmPassword, region) => {\r\n    return axios.post(API_URL_SIGNUP, {\r\n        username,\r\n        email,\r\n        password,\r\n        confirmPassword,\r\n        region,\r\n    });\r\n};\r\n\r\nconst report = (nickname,reportType,description) => {\r\n    return axios.post(API_URL_REPORT, {\r\n        nickname,reportType,description\r\n    }, {\r\n        headers: {\r\n            \"Bearer\": getCurrentUser\r\n        }\r\n    })\r\n    .then((response)=>{\r\n        console.log(response)\r\n        return response;\r\n    });\r\n};\r\n\r\nconst login = (username, password) => {\r\n    return axios\r\n        .post(API_URL_SIGNIN, {\r\n            username,\r\n            password,\r\n        })\r\n        .then((response) => {\r\n            \r\n            if (response.data) {\r\n                localStorage.setItem(\"userToken\", response.data);\r\n                return response;\r\n            }\r\n            \r\n        });\r\n};\r\n\r\nconst verifyUserExists = (username) => {\r\n    const url = \"http://192.168.1.235:8080/api/v1/users/username/\"+username;\r\n    return axios.get(url).then(\r\n        (response) => { \r\n            return response\r\n        })\r\n        .catch(error => {\r\n        });\r\n};\r\n\r\nconst verifyEmailExists = (email) => {\r\n    const url = \"http://192.168.1.235:8080/api/v1/users/\"+email;\r\n    return axios.get(url).then(\r\n        (response) => {\r\n            return response\r\n        });\r\n};\r\n\r\nconst logout = () => {\r\n    localStorage.removeItem(\"userToken\");\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    return localStorage.getItem(\"userToken\");\r\n};\r\n\r\nexport default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n    verifyUserExists,\r\n    verifyEmailExists,\r\n    report,\r\n};"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kartu\\\\Desktop\\\\reactjs\\\\src\\\\pages\\\\Register\\\\RegisterPage.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Col, Container, Row } from 'react-bootstrap'; //service\n\nimport AuthService from '../../service/auth.service'; //scss\n\nimport './RegisterPage.scss';\n\nconst RegisterPage = props => {\n  const {\n    register,\n    errors,\n    handleSubmit,\n    watch\n  } = useForm({});\n  const passwordWatched = useRef({});\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [usernameAlreadyExist, setUsernameAlreadyExist] = useState();\n  const [emailAlreadyExists, setEmailAlreadyExists] = useState();\n  passwordWatched.current = watch(\"password\", \"\");\n  useEffect(() => {}, [usernameAlreadyExist]);\n\n  const onSubmit = data => {\n    AuthService.verifyUserExists(data.username).then(response => {\n      response.status === 200 ? setUsernameAlreadyExist(true) : setUsernameAlreadyExist(false);\n    });\n    AuthService.verifyEmailExists(data.email).then(response => {\n      console.log(response);\n    });\n    setUsername(data.username);\n    setPassword(data.password);\n    setEmail(data.email);\n    setConfirmPassword(data.confirmPassword);\n  };\n\n  if (usernameAlreadyExist === false && emailAlreadyExists === false) {\n    AuthService.register(username, email, password, confirmPassword).then(response => {\n      props.history.push({\n        pathname: '/message',\n        state: {\n          successful: true,\n          message: \"A verification link has been sent your email: \" + email\n        }\n      });\n    }, error => {\n      console.log(error);\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      props.history.push({\n        pathname: '/message',\n        state: {\n          successful: false,\n          message: resMessage\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"justify-content-md-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"col-lg-4 form-login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, \"Sign Up\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"username\",\n    className: \"form-control mb-2 \",\n    type: \"text\",\n    placeholder: \"username\",\n    ref: register({\n      required: \"You must specify a username\",\n      minLength: {\n        value: 8,\n        message: \"username must have at least 6 characters\"\n      },\n      pattern: {\n        value: /^[a-zA-Z0-9_]+$/,\n        message: \"No Speacial Characters\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }), errors.username && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 45\n    }\n  }, errors.username.message), usernameAlreadyExist && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 50\n    }\n  }, \"Username Already Exists\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"email\",\n    className: \"form-control mb-2 \",\n    type: \"text\",\n    placeholder: \"email\",\n    ref: register({\n      required: \"required\",\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: \"invalid email address\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 25\n    }\n  }), errors.email && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 42\n    }\n  }, errors.email.message), emailAlreadyExists && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 48\n    }\n  }, \"email Already exists\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"password\",\n    className: \"form-control mb-2 \",\n    type: \"text\",\n    placeholder: \"password\",\n    ref: register({\n      required: \"You must specify a password\",\n      minLength: {\n        value: 8,\n        message: \"Password must have at least 8 characters\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }\n  }), errors.password && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 45\n    }\n  }, errors.password.message), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"confirmPassword\",\n    className: \"form-control mb-2\",\n    placeholder: \"confirm password\",\n    type: \"text\",\n    ref: register({\n      validate: value => value === passwordWatched.current || \"The passwords do not match\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 25\n    }\n  }), errors.confirmPassword && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 52\n    }\n  }, errors.confirmPassword.message), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"form-control \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default RegisterPage;","map":{"version":3,"sources":["C:/Users/kartu/Desktop/reactjs/src/pages/Register/RegisterPage.js"],"names":["React","useState","useRef","useEffect","useForm","Col","Container","Row","AuthService","RegisterPage","props","register","errors","handleSubmit","watch","passwordWatched","username","setUsername","password","setPassword","email","setEmail","confirmPassword","setConfirmPassword","usernameAlreadyExist","setUsernameAlreadyExist","emailAlreadyExists","setEmailAlreadyExists","current","onSubmit","data","verifyUserExists","then","response","status","verifyEmailExists","console","log","history","push","pathname","state","successful","message","error","resMessage","toString","required","minLength","value","pattern","validate"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\n//service\r\nimport AuthService from '../../service/auth.service';\r\n\r\n//scss\r\nimport './RegisterPage.scss';\r\n\r\n\r\nconst RegisterPage = (props) => {\r\n\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({});\r\n\r\n    const passwordWatched = useRef({});\r\n\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n    const [usernameAlreadyExist, setUsernameAlreadyExist] = useState();\r\n    const [emailAlreadyExists, setEmailAlreadyExists] = useState();\r\n\r\n    passwordWatched.current = watch(\"password\", \"\")\r\n\r\n    useEffect(() => {\r\n    }, [usernameAlreadyExist])\r\n\r\n\r\n\r\n    const onSubmit = data => {\r\n\r\n        AuthService.verifyUserExists(data.username).then(\r\n            (response) => {\r\n                response.status === 200 ? setUsernameAlreadyExist(true) : setUsernameAlreadyExist(false)\r\n            }\r\n        );\r\n\r\n        AuthService.verifyEmailExists(data.email).then(\r\n            (response) => {\r\n                console.log(response)\r\n            }\r\n        );\r\n\r\n        setUsername(data.username)\r\n        setPassword(data.password)\r\n        setEmail(data.email)\r\n        setConfirmPassword(data.confirmPassword)\r\n\r\n    };\r\n    if (usernameAlreadyExist === false && emailAlreadyExists === false) {\r\n        AuthService.register(username, email, password, confirmPassword).then(\r\n            (response) => {\r\n                props.history.push({\r\n                    pathname: '/message',\r\n                    state: {\r\n                        successful: true,\r\n                        message: \"A verification link has been sent your email: \" + email\r\n                    }\r\n                });\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                props.history.push({\r\n                    pathname: '/message',\r\n                    state: {\r\n                        successful: false,\r\n                        message: resMessage\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"justify-content-md-center\">\r\n                <Col className=\"col-lg-4 form-login\">\r\n                    <h5>Sign Up</h5>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <input\r\n                            name=\"username\"\r\n                            className=\"form-control mb-2 \"\r\n                            type=\"text\"\r\n                            placeholder=\"username\"\r\n                            ref={register({\r\n                                required: \"You must specify a username\",\r\n                                minLength: {\r\n                                    value: 8,\r\n                                    message: \"username must have at least 6 characters\"\r\n                                },\r\n                                 pattern: {\r\n                                    value:  /^[a-zA-Z0-9_]+$/,\r\n                                    message: \"No Speacial Characters\"\r\n                                },\r\n                                \r\n                            })}\r\n                        />\r\n                        {errors.username && <p>{errors.username.message}</p>}\r\n                        {usernameAlreadyExist && <p>Username Already Exists</p>}\r\n\r\n                        <input\r\n                            name=\"email\"\r\n                            className=\"form-control mb-2 \"\r\n                            type=\"text\"\r\n                            placeholder=\"email\"\r\n                            ref={register({\r\n                                required: \"required\",\r\n                                pattern: {\r\n                                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                                    message: \"invalid email address\"\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                        {errors.email && <p>{errors.email.message}</p>}\r\n                        {emailAlreadyExists && <p>email Already exists</p>}\r\n\r\n                        <input\r\n                            name=\"password\"\r\n                            className=\"form-control mb-2 \"\r\n                            type=\"text\"\r\n                            placeholder=\"password\"\r\n                            ref={register({\r\n                                required: \"You must specify a password\",\r\n                                minLength: {\r\n                                    value: 8,\r\n                                    message: \"Password must have at least 8 characters\"\r\n                                }\r\n                            })}\r\n                        />\r\n                        {errors.password && <p>{errors.password.message}</p>}\r\n\r\n                        <input\r\n                            name=\"confirmPassword\"\r\n                            className=\"form-control mb-2\"\r\n                            placeholder=\"confirm password\"\r\n                            type=\"text\"\r\n                            ref={register({\r\n                                validate: value =>\r\n                                    value === passwordWatched.current || \"The passwords do not match\"\r\n                            })}\r\n                        />\r\n                        {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>}\r\n\r\n                        <input type=\"submit\" className=\"form-control \" />\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n};\r\n\r\nexport default RegisterPage;"]},"metadata":{},"sourceType":"module"}
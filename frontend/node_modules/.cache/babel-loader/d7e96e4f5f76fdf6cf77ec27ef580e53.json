{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kartu\\\\Desktop\\\\reactjs\\\\src\\\\pages\\\\Register\\\\Register.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Col, Container, Row } from 'react-bootstrap'; //service\n\nimport AuthService from '../../service/auth.service'; //scss\n\nimport './Register.scss';\n\nconst vregion = value => {\n  if (!value) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }\n    }, \"Please Select the region\");\n  }\n};\n\nconst Register = props => {\n  const {\n    register,\n    errors,\n    handleSubmit,\n    watch\n  } = useForm({});\n  const passwordWatched = useRef({});\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [region, setRegion] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [usernameAlreadyExist, setUsernameAlreadyExist] = useState();\n  const [emailAlreadyExists, setEmailAlreadyExists] = useState();\n  let diocane;\n  passwordWatched.current = watch(\"password\", \"\");\n  useEffect(() => {}, [usernameAlreadyExist]);\n\n  const onChangeUsername = e => {\n    setUsername(e.target.value);\n  };\n\n  const onChangePassword = e => {\n    setPassword(e.target.value);\n  };\n\n  const onChangeEmail = e => {\n    setEmail(e.target.value);\n  };\n\n  const onChangeConfirmPassword = e => {\n    setConfirmPassword(e.target.value);\n  };\n\n  const onChangeRegion = e => {\n    setRegion(e.target.value);\n  };\n\n  const onSubmit = e => {\n    AuthService.verifyUserExists(username).then(response => {\n      response.status === 200 ? setUsernameAlreadyExist(true) : setUsernameAlreadyExist(false);\n    });\n    AuthService.verifyUserExists(email).the(response => {\n      response.status === 200 ? setEmailAlreadyExists(true) : setEmailAlreadyExists(false);\n    });\n  };\n\n  if (usernameAlreadyExist === false) {\n    AuthService.register(username, email, password, confirmPassword, region).then(response => {\n      props.history.push({\n        pathname: '/message',\n        state: {\n          successful: true,\n          message: \"A verification link has been sent your email: \" + email\n        }\n      });\n    }, error => {\n      const resMessage = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n      props.history.push({\n        pathname: '/message',\n        state: {\n          successful: false,\n          message: resMessage\n        }\n      });\n    });\n  }\n\n  const regions = [\"euw\", \"na\", \"korea\", \"japan\"];\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"col-lg-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    className: \"col-lg-4 form-login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"username\",\n    value: username,\n    onChange: onChangeUsername,\n    className: \"form-control mb-2 \",\n    type: \"text\",\n    placeholder: \"username\",\n    ref: register({\n      required: \"You must specify a username\",\n      minLength: {\n        value: 8,\n        message: \"username must have at least 6 characters\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 25\n    }\n  }), errors.username && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 45\n    }\n  }, errors.username.message), usernameAlreadyExist && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 50\n    }\n  }, \"Username Already Exists\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"email\",\n    value: email,\n    onChange: onChangeEmail,\n    className: \"form-control mb-2 \",\n    type: \"text\",\n    placeholder: \"email\",\n    ref: register({\n      required: \"required\",\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: \"invalid email address\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }), errors.email && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 42\n    }\n  }, errors.email.message), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"password\",\n    onChange: onChangePassword,\n    className: \"form-control mb-2 \",\n    type: \"text\",\n    placeholder: \"password\",\n    ref: register({\n      required: \"You must specify a password\",\n      minLength: {\n        value: 8,\n        message: \"Password must have at least 8 characters\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }), errors.password && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 45\n    }\n  }, errors.password.message), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    onChange: onChangeConfirmPassword,\n    className: \"form-control mb-2\",\n    placeholder: \"confirm password\",\n    type: \"text\",\n    ref: register({\n      validate: value => value === passwordWatched.current || \"The passwords do not match\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }\n  }), errors.confirmPassword && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 52\n    }\n  }, errors.confirmPassword.message), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"region\",\n    value: region,\n    onChange: onChangeRegion,\n    className: \"form-control mb-2\",\n    ref: register({\n      required: \"select one option\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 29\n    }\n  }, \"Select a region\"), regions.map((region, index) => /*#__PURE__*/React.createElement(\"option\", {\n    value: region,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 33\n    }\n  }, region))), errors.region && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 43\n    }\n  }, errors.region.message), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"form-control \",\n    onClick: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lassName: \"col-lg-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Register;","map":{"version":3,"sources":["C:/Users/kartu/Desktop/reactjs/src/pages/Register/Register.js"],"names":["React","useState","useRef","useEffect","useForm","Col","Container","Row","AuthService","vregion","value","Register","props","register","errors","handleSubmit","watch","passwordWatched","username","setUsername","password","setPassword","region","setRegion","email","setEmail","confirmPassword","setConfirmPassword","usernameAlreadyExist","setUsernameAlreadyExist","emailAlreadyExists","setEmailAlreadyExists","diocane","current","onChangeUsername","e","target","onChangePassword","onChangeEmail","onChangeConfirmPassword","onChangeRegion","onSubmit","verifyUserExists","then","response","status","the","history","push","pathname","state","successful","message","error","resMessage","data","toString","regions","preventDefault","required","minLength","pattern","validate","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\n\r\n//service\r\nimport AuthService from '../../service/auth.service';\r\n\r\n//scss\r\nimport './Register.scss';\r\n\r\nconst vregion = (value) => {\r\n    if (!value) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Please Select the region\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nconst Register = (props) => {\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({});\r\n\r\n    const passwordWatched = useRef({});\r\n\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [region, setRegion] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n    const [usernameAlreadyExist, setUsernameAlreadyExist] = useState();\r\n    const [emailAlreadyExists, setEmailAlreadyExists] = useState();\r\n    let diocane;\r\n\r\n    passwordWatched.current = watch(\"password\", \"\")\r\n\r\n    useEffect(() => {\r\n    }, [usernameAlreadyExist])\r\n\r\n    const onChangeUsername = (e) => {\r\n        setUsername(e.target.value)\r\n    };\r\n\r\n    const onChangePassword = (e) => {\r\n        setPassword(e.target.value)\r\n    };\r\n\r\n    const onChangeEmail = (e) => {\r\n        setEmail(e.target.value)\r\n    };\r\n\r\n    const onChangeConfirmPassword = (e) => {\r\n        setConfirmPassword(e.target.value)\r\n    };\r\n\r\n    const onChangeRegion = (e) => {\r\n        setRegion(e.target.value)\r\n    };\r\n\r\n\r\n    const onSubmit = e => {\r\n\r\n        AuthService.verifyUserExists(username).then(\r\n            (response) => {\r\n                response.status === 200 ? setUsernameAlreadyExist(true) : setUsernameAlreadyExist(false)\r\n            }\r\n        );\r\n\r\n        AuthService.verifyUserExists(email).the(\r\n            (response) => {\r\n                response.status === 200 ? setEmailAlreadyExists(true) : setEmailAlreadyExists(false)\r\n            }\r\n        );\r\n\r\n    };\r\n    if(usernameAlreadyExist===false) {\r\n        AuthService.register(username, email, password, confirmPassword, region).then(\r\n            (response) => {\r\n                props.history.push({\r\n                    pathname: '/message',\r\n                    state: {\r\n                        successful: true,\r\n                        message: \"A verification link has been sent your email: \" + email\r\n                    }\r\n                });\r\n            },\r\n            (error) => {\r\n                const resMessage =\r\n                    (error.response &&\r\n                        error.response.data &&\r\n                        error.response.data.message) ||\r\n                    error.message ||\r\n                    error.toString();\r\n\r\n                props.history.push({\r\n                    pathname: '/message',\r\n                    state: {\r\n                        successful: false,\r\n                        message: resMessage\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n\r\n    const regions = [\"euw\", \"na\", \"korea\", \"japan\"];\r\n\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col className='col-lg-4'>\r\n                </Col>\r\n                <Col className=\"col-lg-4 form-login\">\r\n                    <form onSubmit={e => e.preventDefault()}>\r\n                        <input\r\n                            name=\"username\"\r\n                            value={username}\r\n                            onChange={onChangeUsername}\r\n                            className=\"form-control mb-2 \"\r\n                            type=\"text\"\r\n                            placeholder=\"username\"\r\n                            ref={register({\r\n                                required: \"You must specify a username\",\r\n                                minLength: {\r\n                                    value: 8,\r\n                                    message: \"username must have at least 6 characters\"\r\n                                }\r\n                            })}\r\n                        />\r\n                        {errors.username && <p>{errors.username.message}</p>}\r\n                        {usernameAlreadyExist && <p>Username Already Exists</p>}\r\n\r\n                        <input\r\n                            name=\"email\"\r\n                            value={email}\r\n                            onChange={onChangeEmail}\r\n                            className=\"form-control mb-2 \"\r\n                            type=\"text\"\r\n                            placeholder=\"email\"\r\n                            ref={register({\r\n                                required: \"required\",\r\n                                pattern: {\r\n                                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                                    message: \"invalid email address\"\r\n                                }\r\n                            })}\r\n                        />\r\n\r\n                        {errors.email && <p>{errors.email.message}</p>}\r\n\r\n                        <input\r\n                            name=\"password\"\r\n                            onChange={onChangePassword}\r\n                            className=\"form-control mb-2 \"\r\n                            type=\"text\"\r\n                            placeholder=\"password\"\r\n                            ref={register({\r\n                                required: \"You must specify a password\",\r\n                                minLength: {\r\n                                    value: 8,\r\n                                    message: \"Password must have at least 8 characters\"\r\n                                }\r\n                            })}\r\n                        />\r\n                        {errors.password && <p>{errors.password.message}</p>}\r\n\r\n                        <input\r\n                            name=\"confirmPassword\"\r\n                            value={confirmPassword}\r\n                            onChange={onChangeConfirmPassword}\r\n                            className=\"form-control mb-2\"\r\n                            placeholder=\"confirm password\"\r\n                            type=\"text\"\r\n                            ref={register({\r\n                                validate: value =>\r\n                                    value === passwordWatched.current || \"The passwords do not match\"\r\n                            })}\r\n                        />\r\n\r\n                        {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>}\r\n\r\n                        <select name=\"region\"\r\n                            value={region}\r\n                            onChange={onChangeRegion}\r\n                            className=\"form-control mb-2\"\r\n                            ref={register({\r\n                                required: \"select one option\"\r\n                            })}>\r\n                            <option value=\"\">Select a region</option>\r\n                            {regions.map((region, index) =>\r\n                                <option value={region}>{region}</option>\r\n                            )}\r\n                        </select>\r\n\r\n                        {errors.region && <p>{errors.region.message}</p>}\r\n\r\n                        <input type=\"submit\" className=\"form-control \" onClick={handleSubmit(onSubmit)} />\r\n                    </form>\r\n                </Col>\r\n                <Col lassName='col-lg-4'>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n\r\n};\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}
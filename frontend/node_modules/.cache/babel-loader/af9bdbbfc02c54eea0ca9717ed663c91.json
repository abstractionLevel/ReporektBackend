{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kartu\\\\Desktop\\\\reactjs\\\\src\\\\component\\\\updatePassword\\\\UpdatePassword.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { Col, Container, Row } from 'react-bootstrap';\nimport AuthService from '../../service/auth.service';\nimport './UpdatePassword.scss';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nconst UpdatePassword = () => {\n  const {\n    register,\n    errors,\n    handleSubmit,\n    watch\n  } = useForm({});\n  const passwordWatched = useRef({});\n  const [oldPassword, setOldPassword] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  passwordWatched.current = watch(\"password\", \"\");\n  const passwordNotFound = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 30\n    }\n  }, \"Password Not Found\");\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    window.location.reload();\n  };\n\n  const handleOpenModal = () => setShowModal(true);\n\n  const onChangeOldPassword = e => {\n    setOldPassword(e.target.value);\n  };\n\n  const onChangPassword = e => {\n    setPassword(e.target.value);\n  };\n\n  const onChangeConfirmPassword = e => {\n    setConfirmPassword(e.target.value);\n  };\n\n  const onSubmit = e => {\n    AuthService.updatePassword(oldPassword, password, confirmPassword).then(response => {\n      response.status === 200 ? handleOpenModal() : setMessage(passwordNotFound);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Update Password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => e.preventDefault(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, message, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"oldPassword\",\n    className: \"form-control mb-2\",\n    type: \"text\",\n    placeholder: \"actual password\",\n    ref: register({\n      required: \"You must type an actual  password\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }), errors.oldPassword && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 40\n    }\n  }, errors.oldPassword.message), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"password\",\n    onChange: onChangPassword,\n    className: \"form-control mb-2\",\n    type: \"text\",\n    placeholder: \"new password\",\n    ref: register({\n      required: \"You must type a new  password\",\n      minLength: {\n        value: 8,\n        message: \"Password must have at least 8 characters\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), errors.password && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 37\n    }\n  }, errors.password.message), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"confirmPassword\",\n    className: \"form-control mb-2\",\n    type: \"text\",\n    placeholder: \"confirm password\",\n    ref: register({\n      validate: value => value === passwordWatched.current || \"The passwords do not match\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }), errors.confirmPassword && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 44\n    }\n  }, errors.confirmPassword.message), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"form-control \",\n    onClick: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Modal, {\n    show: showModal,\n    onHide: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, \"Password Update\"), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    onClick: handleCloseModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, \"Close\"))));\n};\n\nexport default UpdatePassword;","map":{"version":3,"sources":["C:/Users/kartu/Desktop/reactjs/src/component/updatePassword/UpdatePassword.js"],"names":["React","useState","useRef","useEffect","useForm","Col","Container","Row","AuthService","Modal","Button","UpdatePassword","register","errors","handleSubmit","watch","passwordWatched","oldPassword","setOldPassword","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","showModal","setShowModal","current","passwordNotFound","handleCloseModal","window","location","reload","handleOpenModal","onChangeOldPassword","e","target","value","onChangPassword","onChangeConfirmPassword","onSubmit","updatePassword","then","response","status","preventDefault","required","minLength","validate"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport AuthService from '../../service/auth.service';\r\nimport './UpdatePassword.scss';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst UpdatePassword = () => {\r\n\r\n    const { register, errors, handleSubmit, watch } = useForm({});\r\n\r\n    const passwordWatched = useRef({});\r\n\r\n    const [oldPassword, setOldPassword] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [showModal, setShowModal] = useState(false)\r\n\r\n    passwordWatched.current = watch(\"password\", \"\")\r\n    const passwordNotFound = <p>Password Not Found</p>\r\n\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        window.location.reload();\r\n    }\r\n    const handleOpenModal = () => setShowModal(true);\r\n\r\n\r\n    const onChangeOldPassword = (e) => {\r\n        setOldPassword(e.target.value);\r\n    };\r\n\r\n    const onChangPassword = (e) => {\r\n        setPassword(e.target.value);\r\n    };\r\n\r\n    const onChangeConfirmPassword = (e) => {\r\n        setConfirmPassword(e.target.value);\r\n    };\r\n\r\n    const onSubmit = e => {\r\n        AuthService.updatePassword(oldPassword, password, confirmPassword).then(\r\n            (response) => {\r\n                response.status === 200 ? handleOpenModal() : setMessage(passwordNotFound)\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h5>Update Password</h5>\r\n            <form onSubmit={e => e.preventDefault()}>\r\n                {message}\r\n                <input\r\n                    name=\"oldPassword\"\r\n                    className=\"form-control mb-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"actual password\"\r\n                    ref={register({\r\n                        required: \"You must type an actual  password\"\r\n                    })}\r\n                />\r\n                {errors.oldPassword && <p>{errors.oldPassword.message}</p>}\r\n                <input\r\n                    name=\"password\"\r\n                    onChange={onChangPassword}\r\n                    className=\"form-control mb-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"new password\"\r\n                    ref={register({\r\n                        required: \"You must type a new  password\",\r\n                        minLength: {\r\n                            value: 8,\r\n                            message: \"Password must have at least 8 characters\"\r\n                        }\r\n                    })}\r\n                />\r\n                {errors.password && <p>{errors.password.message}</p>}\r\n                <input\r\n                    name=\"confirmPassword\"\r\n                    className=\"form-control mb-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"confirm password\"\r\n                    ref={register({\r\n                        validate: value =>\r\n                            value === passwordWatched.current || \"The passwords do not match\"\r\n                    })}\r\n                />\r\n                {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>}\r\n                <input type=\"submit\" className=\"form-control \" onClick={handleSubmit(onSubmit)} />\r\n\r\n            </form>\r\n\r\n            <Modal show={showModal} onHide={handleCloseModal}>\r\n                <Modal.Body>\r\n                    Password Update\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleCloseModal}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default UpdatePassword"]},"metadata":{},"sourceType":"module"}